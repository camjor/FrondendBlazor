@page "/personas"
@using BlazorAppPrueba2.Models
@using BlazorAppPrueba2.Services

@inject PersonaService PersonaService

<h3>Gestión de Usuarios</h3>

<!-- Formulario para registrar usuario -->
<h4>Registrar Usuario</h4>
<div>
    <input @bind="nuevoUsuario.Nombre" placeholder="Nombre" />
    <input @bind="nuevoUsuario.Apellido" placeholder="Apellido" />
    <input @bind="nuevoUsuario.UserName" placeholder="Usuario" />
    <input @bind="nuevoUsuario.Identificacion" placeholder="Identificación" />
    <button @onclick="RegistrarUsuario">Registrar</button>
</div>

<!-- Lista de personas -->
<h4>Lista de Usuarios</h4>
@if (personas is null)
{
    <p>Cargando...</p>
}
else if (personas.Count == 0)
{
    <p>No hay usuarios registrados.</p>
}
else
{
    <ul>
        @foreach (var persona in personas)
        {
            <li>
                <b>@persona.Nombre @persona.Apellido</b> - @persona.UserName
                <button @onclick="() => EditarPersona(persona)">✏️</button>
                <button @onclick="() => EliminarPersona(persona.Identificacion)">🗑️</button>
            </li>
        }
    </ul>
}

<!-- Formulario para editar usuario -->
@if (personaEditando is not null)
{
    <h4>Editar Usuario</h4>
    <div>
        <input @bind="personaEditando.Nombre" placeholder="Nombre" />
        <input @bind="personaEditando.Apellido" placeholder="Apellido" />
        <input @bind="personaEditando.UserName" placeholder="Usuario" />
        <button @onclick="GuardarEdicion">Guardar</button>
        <button @onclick="CancelarEdicion">Cancelar</button>
    </div>
}

@code {
    private List<Persona> personas = new();
    private Persona nuevoUsuario = new();
    private Persona? personaEditando;

    protected override async Task OnInitializedAsync()
    {
        personas = await PersonaService.GetAllPersonasAsync() ?? new List<Persona>();
    }

    private async Task RegistrarUsuario()
    {
        //await PersonaService.RegistrarAsync(nuevoUsuario);
        nuevoUsuario = new();  // Limpiar formulario
        personas = await PersonaService.GetAllPersonasAsync() ?? new List<Persona>();  // Actualizar lista
    }

    private async Task EliminarPersona(string identificacion)
    {
        var confirmacion = await Task.Run(() => Confirm($"¿Seguro que quieres eliminar al usuario {identificacion}?"));
        if (!confirmacion) return;

        await PersonaService.DeletePersonaAsync(identificacion);
        personas = await PersonaService.GetAllPersonasAsync() ?? new List<Persona>();
    }

    private void EditarPersona(Persona persona)
    {
        personaEditando = new Persona
            {
                Identificacion = persona.Identificacion,
                Nombre = persona.Nombre,
                Apellido = persona.Apellido,
                UserName = persona.UserName
            };
    }

    private async Task GuardarEdicion()
    {
        if (personaEditando is not null)
        {
            await PersonaService.UpdatePersonaAsync(personaEditando.Identificacion, personaEditando);
            personaEditando = null;
            personas = await PersonaService.GetAllPersonasAsync() ?? new List<Persona>();
        }
    }

    private void CancelarEdicion()
    {
        personaEditando = null;
    }

    private bool Confirm(string mensaje)
    {
        return new Random().Next(0, 2) == 1; // Simulación de confirmación
    }
}
